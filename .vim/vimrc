set nocompatible
set nobackup
set nowritebackup
set cmdheight=2
set encoding=utf-8
set viminfo=""
set viewdir=~/.vim/view
set updatetime=300
set shortmess+=c
set signcolumn=yes

" tab setting
set smarttab
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4

set backspace=indent,eol,start

if has("gui_running")
    set guioptions-=e      " needed to show tabline in gvim
    set lines=50
    set columns=160
    set lines=999 columns=999
    if exists('&transparency')
        set transparency=6
    endif
    if has('mac') || has('win64')
        set guifont=Monaco:h12
    else
        set guifont="Monaco 9"
    endif
    set guioptions-=m      " remove menubar
    set guioptions-=T      " remove toolbar
    set guioptions-=r      " remove right-hand scroll bar
    set guioptions-=L      " remove left-hand scroll bar
endif

set number
set numberwidth=5
let $GIT_SSL_NO_VERIFY = 'true'

call plug#begin('~/.vim/plugged')
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'webdevel/tabulous'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'sheerun/vim-polyglot'
Plug 'NLKNguyen/papercolor-theme'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jiangmiao/auto-pairs'
call plug#end()
filetype plugin indent on
set showtabline=2
set laststatus=2
" theme customization
let g:airline_section_c='[DEC=%b] [HEX=%B] [LINE=%.5l] [COL=%.5v]'
let g:airline_theme='papercolor'
let g:PaperColor_Theme_Options= {
    \   'language': {
    \       'python': {
    \           'highlight_builtins': 1
    \       },
    \       'cpp': {
    \           'highlight_standard_library': 1
    \       },
    \       'c': {
    \           'highlight_builtins': 1
    \       }
    \   }
    \ }
let python_highlight_all = 1
set background=dark
set nobackup
set splitbelow
set splitright
set wrap
set showmatch

let g:python3_host_prog='/usr/local/bin/python3'

" load customization file
source ~/.vim/my_setting.vim
source ~/.vim/my_keymap.vim
source ~/.vim/my_utilsnips.vim
" source ~/.vim/_my_youcompleteme

" coc-nvim specific keymap
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
" ---------------------------------------------------------------------------
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

let g:coc_global_extensions=['coc-python', 'coc-json', 'coc-vimlsp', 'coc-snippets']

call my_setting#SetCocPythonPath()

if !has('nvim')
    augroup MyColors
        autocmd!
        autocmd ColorScheme * call my_setting#MyHighlights()
    augroup END
else
    call my_setting#MyHighlights()
endif
colorscheme PaperColor
call my_setting#MyHighlights()


" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
"inoremap <silent><expr> <leader><space> pumvisible() ? "\<C-O>a" : "\\"
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
" nnoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
" nnoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
" inoremap <expr><C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<Right>"
" inoremap <expr><C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<Left>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" ---------------------------------------------------------------------------
let g:AutoPairsMapCh=0
let g:AutoPairsShortcutFastWrap=''
let g:AutoPairsMapSpace=0

inoremap <buffer> <silent> e <C-R>=AutoPairsFastWrap()<CR>
inoremap <buffer> <silent> p <C-R>=AutoPairsToggle()<CR>
nnoremap <buffer> <silent> p :call AutoPairsToggle()<CR>
inoremap <buffer> <silent> <M-e> <C-R>=AutoPairsFastWrap()<CR>
inoremap <buffer> <silent> <M-p> <C-R>=AutoPairsToggle()<CR>

" needed to get coc to work properly
set hidden
set nobackup
